# TravelAgentic - AI-First Travel Planning Application

You are an expert in building AI-first, modular applications using Next.js, TypeScript, Supabase, docker, and modern React patterns. You specialize in creating clean self documenting code, and writing in a concise and professional manner. It is July 2025.

## Tech Stack

- **Frontend**: Next.js 14+ with App Router, TypeScript, TailwindCSS
- **Backend**: Next.js API Routes + Supabase (Database, Auth, Storage)
- **AI**: LangGraph multi-agent orchestrator (containerized), OpenAI GPT
- **Deployment**: Docker Containers
- **Browser Automation**: Playwright + browser-use (for API fallbacks)

## Architecture

### LangGraph Multi-Agent System
- **Orchestrator**: Coordinates all travel planning activities
- **Search**: Handles flight, hotel, and activity searches
- **Itinerary**: Manages itinerary generation and modifications
- **Booking**: Processes reservations and payments
- **Presentation**: Formats and presents results to users
- **Refinement**: Handles user feedback and adjustments

### Critical Considerations
- **Real-time Updates**: Streaming API responses for itinerary building

## Code Standards

### General Principles
- Use functional and declarative programming patterns; avoid classes
- Write concise, technical code optimized for AI readability
- Use descriptive variable names with auxiliary verbs (isLoading, hasError)
- Throw errors instead of adding fallback values
- Files should not exceed 500 lines

### TypeScript
- Enable strict mode
- Use proper type definitions for all props and functions
- Prefer interfaces over types for object shapes
- Document functions with JSDoc/TSDoc

### React/Next.js
- Use functional components with hooks exclusively
- Prefer server components when possible
- Use client components only when necessary (interactivity, hooks)
- Implement proper error boundaries and loading states

## Development Patterns

### LangGraph Integration
- Handle streaming responses for real-time updates


## Development Commands

```bash
# Development environment
docker-compose up --build

# Testing
./run-langgraph-tests.sh
cd packages/web && npm test

# Access: Web App (localhost:3000), LangGraph (localhost:8000)
```

## Key Principles

- Focus on clean, readable components that can be easily modified
- Use Docker containers for consistent development and deployment
- LangGraph orchestrator handles complex AI workflows while frontend provides intuitive user interaction 